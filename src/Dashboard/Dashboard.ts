import {
  AbstractCell,
  AbstractGrid,
  AbstractDashboard,
} from "./AbstractDashboaed";

export class Cell extends AbstractCell {
  constructor(type: string = "empty") {
    // –í—ã–∑—ã–≤–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super(type);
  }

  public activateBonus(): void {
    if (this.type === "bonus") {
      console.log("Bonus activated! üöÄ");
      // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—á–∫–æ–≤, —É–¥–∞–ª–µ–Ω–∏–µ —Ä—è–¥–∞ –∏ —Ç.–¥.)
    } else {
      console.warn("–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å –Ω–∞ –Ω–µ-–±–æ–Ω—É—Å–Ω–æ–π —è—á–µ–π–∫–µ");
    }
  }

  public getStatus(): string {
    return this.type;
  }
}

export class Grid extends AbstractGrid {
  private cells: Cell[][];

  constructor(private width: number, private height: number) {
    super();
    // –°–æ–∑–¥–∞—ë–º –º–∞—Ç—Ä–∏—Ü—É —è—á–µ–µ–∫
    this.cells = [];
    for (let y = 0; y < height; y++) {
      const row: Cell[] = [];
      for (let x = 0; x < width; x++) {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç—å –≤—Å–µ –±—É–¥—É—Ç "empty"
        row.push(new Cell("empty"));
      }
      this.cells.push(row);
    }
  }

  public swapCells(x1: number, y1: number, x2: number, y2: number): void {
    // –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏–µ: —è—á–µ–π–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    if (!this.isValidCoord(x1, y1) || !this.isValidCoord(x2, y2)) return;

    const temp = this.cells[y1][x1];
    this.cells[y1][x1] = this.cells[y2][x2];
    this.cells[y2][x2] = temp;
  }

  public fillEmptyCells(): void {
    // –î–æ–ø—É—Å—Ç–∏–º, –º—ã –¥–µ–ª–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ "empty".
    for (let y = 0; y < this.height; y++) {
      for (let x = 0; x < this.width; x++) {
        this.cells[y][x] = new Cell("empty");
      }
    }
  }

  public fillFullCells(): void {
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 —Å–∏–º–≤–æ–ª–æ–≤).
    const possibleTypes = ["A", "B", "C", "D", "E"];

    for (let y = 0; y < this.height; y++) {
      for (let x = 0; x < this.width; x++) {
        if (this.cells[y][x].getStatus() === "empty") {
          // 10% —à–∞–Ω—Å, —á—Ç–æ —è—á–µ–π–∫–∞ –±—É–¥–µ—Ç "bonus", –∏–Ω–∞—á–µ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª.
          const rand = Math.random();
          if (rand < 0.1) {
            this.cells[y][x] = new Cell("–ë–ê–ú");
          } else {
            const randomIndex = Math.floor(
              Math.random() * possibleTypes.length
            );
            const randomSymbol = possibleTypes[randomIndex];
            this.cells[y][x] = new Cell(randomSymbol);
          }
        }
      }
    }
  }

  public generateGridString(): string {
    // –®–∞–ø–∫–∞: –æ—Ç—Å—Ç—É–ø –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    let result = "     ";
    for (let x = 0; x < this.width; x++) {
      result += `  ${x}  `;
    }
    result += "\n";

    // –õ–∏–Ω–∏—è –ø–æ–¥ —à–∞–ø–∫–æ–π (–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏)
    result += "    " + "+-----".repeat(this.width) + "+\n";

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ (y)
    for (let y = 0; y < this.height; y++) {
      // –í—ã–≤–æ–¥ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–≤–∞
      result += `${y.toString().padStart(3, " ")} | `;

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã (x)
      for (let x = 0; x < this.width; x++) {
        const item = this.cells[y][x].getStatus();
        // –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏ (item)
        // –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å item, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —à–∏—Ä–µ 1
        result += `${item}`.padEnd(4, " ") + "| ";
      }
      result += "\n";
      result += "    " + "+-----".repeat(this.width) + "+\n";
    }

    return result;
  }

  public findMatches(): string[] {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    const matches: string[] = [];
    for (let y = 0; y < this.height; y++) {
      let runType = this.cells[y][0].getStatus();
      let runCount = 1;
      for (let x = 1; x < this.width; x++) {
        const currentType = this.cells[y][x].getStatus();
        if (currentType === runType && currentType !== "empty") {
          runCount++;
        } else {
          // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–ø–æ—á–∫–∞ –±—ã–ª–∞ > 1, –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫
          if (runCount > 1 && runType !== "empty") {
            matches.push(`Row ${y}, type=${runType}, length=${runCount}`);
          }
          runType = currentType;
          runCount = 1;
        }
      }
      // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
      if (runCount > 1 && runType !== "empty") {
        matches.push(`Row ${y}, type=${runType}, length=${runCount}`);
      }
    }
    return matches;
  }

  public isValidCoord(x: number, y: number): boolean {
    return x >= 0 && x < this.width && y >= 0 && y < this.height;
  }

  public removeMatches(matchCoords: string[]): void {
    for (const [x, y] of matchCoords) {
      // –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
      if (this.isValidCoord(+x, +y)) {
        // –ü–æ–º–µ—á–∞–µ–º —è—á–µ–π–∫—É –∫–∞–∫ –ø—É—Å—Ç—É—é
        this.cells[+y][+x] = new Cell("empty");
        console.log('–¥–æ–±–∞–≤–∏–ª–∏ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É')
      }
    }
  }

  public getCell(x: number, y: number): Cell | null {
    if (!this.isValidCoord(x, y)) return null;
    return this.cells[y][x];
  }
}

export class Dashboard extends AbstractDashboard {
  private grid: Grid;

  constructor(width: number, height: number) {
    super();
    // –ü–æ—Å—Ç—É—Å–ª–æ–≤–∏–µ: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Grid
    this.grid = new Grid(width, height);
    // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–º–∏-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    this.grid.fillFullCells();
  }

  public updateGridAfterAction(): void {
    // –ü—Ä–∏–º–µ—Ä: –ø—É—Å–∫–∞–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ ¬´—Å–±—Ä–∞—Å—ã–≤–∞–µ–º¬ª —á–∞—Å—Ç—å —è—á–µ–µ–∫ –≤ empty –∏ —Å–Ω–æ–≤–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º
    this.grid.fillEmptyCells();
    this.grid.fillFullCells();
    console.log("Grid was updated after action");
  }

  public getGrid(): Grid {
    return this.grid;
  }
}
